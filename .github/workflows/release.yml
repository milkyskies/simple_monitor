name: Build and Release

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: simple_monitor
            asset_name: simple_monitor-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: simple_monitor.exe
            asset_name: simple_monitor-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: simple_monitor
            asset_name: simple_monitor-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: simple_monitor
            asset_name: simple_monitor-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "${{ matrix.asset_name }}"
          Copy-Item "env.example" "env.example"
          Copy-Item "start-windows.bat" "start-windows.bat"
          Copy-Item "configure-windows.bat" "configure-windows.bat"
          Compress-Archive -Path "${{ matrix.asset_name }}", "env.example", "start-windows.bat", "configure-windows.bat" -DestinationPath "${{ matrix.asset_name }}.zip"

      - name: Create archive (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }} env.example

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.zip

      - name: Upload artifact (Linux and macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/**

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Simple System Monitor ${{ github.ref_name }}

            Cross-platform system monitoring tool with web API.

            ### Features
            - CPU usage monitoring (per-core and average)
            - Memory usage tracking
            - NVIDIA GPU monitoring (if available)
            - Web API endpoints
            - Configurable via environment variables

            ### Quick Start
            1. Download the appropriate binary for your platform
            2. Extract the archive
            3. **Windows users**: Run `configure-windows.bat` for easy setup
            4. **All platforms**: Copy `env.example` to `.env` and configure as needed
            5. Run the binary or use the startup scripts
            6. Access http://localhost:3000/stats for system information

            ### Windows Files Included
            - `simple_monitor.exe` - The main executable
            - `configure-windows.bat` - Interactive configuration helper
            - `start-windows.bat` - Easy startup script
            - `env.example` - Configuration template

            ### Configuration
            - `HOST`: Bind address (default: 127.0.0.1)
            - `PORT`: Port number (default: 3000)

            Set `HOST=0.0.0.0` to allow external connections.

            ### Platforms
            - **Linux**: x86_64
            - **Windows**: x86_64 (includes helper scripts)
            - **macOS**: x86_64 and ARM64 (Apple Silicon)
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in artifacts/**/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=$filename"
            fi
          done
